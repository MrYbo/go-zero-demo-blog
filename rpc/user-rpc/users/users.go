// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package users

import (
	"context"

	user "github.com/blog/v1/rpc/user-rpc/user"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseUser   = user.BaseUser
	CommonOK   = user.CommonOK
	ReqLogin   = user.ReqLogin
	RespLogin  = user.RespLogin
	UserId     = user.UserId
	UserParams = user.UserParams

	Users interface {
		Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*BaseUser, error)
		Create(ctx context.Context, in *UserParams, opts ...grpc.CallOption) (*BaseUser, error)
		Destroy(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*CommonOK, error)
	}

	defaultUsers struct {
		cli zrpc.Client
	}
)

func NewUsers(cli zrpc.Client) Users {
	return &defaultUsers{
		cli: cli,
	}
}

func (m *defaultUsers) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*BaseUser, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsers) Create(ctx context.Context, in *UserParams, opts ...grpc.CallOption) (*BaseUser, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultUsers) Destroy(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*CommonOK, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Destroy(ctx, in, opts...)
}
