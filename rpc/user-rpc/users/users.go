// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package users

import (
	"context"

	user "github.com/blog/v1/rpc/user-rpc/user"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ReqCreate   = user.ReqCreate
	ReqFindAll  = user.ReqFindAll
	ReqId       = user.ReqId
	ReqLogin    = user.ReqLogin
	ReqUpdate   = user.ReqUpdate
	RespComm    = user.RespComm
	RespFindAll = user.RespFindAll
	RespUser    = user.RespUser

	Users interface {
		Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*RespUser, error)
		Create(ctx context.Context, in *ReqCreate, opts ...grpc.CallOption) (*RespUser, error)
		FindOne(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*RespUser, error)
		FindAll(ctx context.Context, in *ReqFindAll, opts ...grpc.CallOption) (*RespFindAll, error)
		Update(ctx context.Context, in *ReqUpdate, opts ...grpc.CallOption) (*RespUser, error)
		Delete(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*RespUser, error)
	}

	defaultUsers struct {
		cli zrpc.Client
	}
)

func NewUsers(cli zrpc.Client) Users {
	return &defaultUsers{
		cli: cli,
	}
}

func (m *defaultUsers) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*RespUser, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsers) Create(ctx context.Context, in *ReqCreate, opts ...grpc.CallOption) (*RespUser, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultUsers) FindOne(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*RespUser, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.FindOne(ctx, in, opts...)
}

func (m *defaultUsers) FindAll(ctx context.Context, in *ReqFindAll, opts ...grpc.CallOption) (*RespFindAll, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.FindAll(ctx, in, opts...)
}

func (m *defaultUsers) Update(ctx context.Context, in *ReqUpdate, opts ...grpc.CallOption) (*RespUser, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultUsers) Delete(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*RespUser, error) {
	client := user.NewUsersClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}
